datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  password         String
  address          String?
  firstName        String?
  lastName         String?
  resetToken       String?
  resetTokenExpires DateTime?
  role             Role           @default(USER)

  createdHunts     TreasureHunt[] @relation("CreatedByUser")
  reviews  Review[]               @relation(onDelete: Cascade)
  participations   Participation[] @relation(onDelete: Cascade)
}
model Participation {
  id       Int           @id @default(autoincrement())
  user     User          @relation(fields: [userId], references: [id])
  userId   Int
  hunt     TreasureHunt  @relation(fields: [huntId], references: [id])
  huntId   Int
  status     HuntStatus    @default(PENDING)

  createdAt DateTime     @default(now())

  @@unique([userId, huntId]) // un utilisateur ne peut participer qu'une fois Ã  une chasse
}


model TreasureHunt {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById Int
  startDate   DateTime?
  endDate     DateTime?
  location    String?
  mode        HuntMode @default(PUBLIC)
  fee         Int?
  mapStyle    String?
  isFinished  Boolean  @default(false)
  status      HuntStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageUrl    String?   
  reviews     Review[]  
  participations Participation[]
}

model Review {
  id        Int           @id @default(autoincrement())
  content   String
  createdAt DateTime      @default(now())

  user      User          @relation(fields: [userId], references: [id])
  userId    Int

  hunt      TreasureHunt  @relation(fields: [huntId], references: [id])
  huntId    Int
}



enum Role {
  USER
  ADMIN
  ORGANIZER
}

enum HuntStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum HuntMode {
  PUBLIC
  PRIVATE
}
